var A: Tensor[l,r]
#var A = newTensor[l,r](2,2)

A[l=0,r=0] = -J
A[l=1,r=1] = J

result = A[l=0,r=0]

{l}A{r} = {l}B[o=0,o=0]{r}
{l}A{r} = {l}B[o=0,o=0]{r}


var B: Tensor[l,o,o,r]
var U: Tensor[l,o,r]
var S: Densor[l,r]
var V: Tensor[l,o,r]
{l,o}U{r}, {l}S{r}, {l}V{r,o} = {l,o}B{r,o}.svd(chi)


var ket = MPS(A(s>l,e>r,(n,w)>o), B(w>l,s>r,(e,n)>o))




# means A,L,B = tnd.tensor_svd_again_in_bdts_normalizing(A,L,B,[R,U,D],[R,U,D], chi=chi)
def svd_again(A:Tensor[l,r,u,d],B:Tensor[l,r,u,d],L,R:DiagonalTensor[l,r],U,D:DiagonalTensor[u,d]):Tensor[l,r,u,d],Tensor[l,r],Tensor[l,r,u,d] =
    A = A{r}*{l}R
    A = A{u}*{d}U
    A = A{d}*{u}D
    B = B{l}*{r}R
    B = B{d}*{u}D
    B = B{u}*{d}U

    {r,u,d}A{l}, {r}L{l}, {r}B{l,d,u} = ({r,u,d}A{l} * {r}L{l} * {r}B{l,d,u}).svd(chi)

    {l,u,d}A{r} = {l,u,d}A{r} / {l}R{r}
    {l,r,d}A{u} = {l,r,d}A{u} / {d}U{u}
    {l,r,u}A{d} = {l,r,u}A{d} / {u}D{d}
    {r,u,d}B{l} = {r,u,d}B{l} / {r}R{l}
    {l,r,u}B{d} = {l,r,u}B{d} / {u}U{d}
    {l,r,d}B{u} = {l,r,d}B{u} / {d}D{u}

    return A,L,B